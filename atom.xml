<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://choara.github.io</id>
    <title>choara&apos;s blog</title>
    <updated>2021-03-20T12:24:34.088Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://choara.github.io"/>
    <link rel="self" href="https://choara.github.io/atom.xml"/>
    <subtitle>心有猛虎 细嗅蔷薇</subtitle>
    <logo>https://choara.github.io/images/avatar.png</logo>
    <icon>https://choara.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, choara&apos;s blog</rights>
    <entry>
        <title type="html"><![CDATA[Java 中的自动拆装箱]]></title>
        <id>https://choara.github.io/post/java-zhong-de-zi-dong-chai-zhuang-xiang/</id>
        <link href="https://choara.github.io/post/java-zhong-de-zi-dong-chai-zhuang-xiang/">
        </link>
        <updated>2020-12-01T06:09:18.000Z</updated>
        <content type="html"><![CDATA[<p>Java 1.5开始引入自动装箱（Autoboxing）和拆箱（Unboxing），目的是将原始类型值自动转换为对应的包装类的对象，编译器在编译的时候自动完成转换，转换过程对外透明。</p>
<h3 id="基本数据类型">基本数据类型</h3>
<table>
<thead>
<tr>
<th>基础类型</th>
<th>包装类</th>
<th>取值范围</th>
</tr>
</thead>
<tbody>
<tr>
<td>byte</td>
<td>Byte</td>
<td>2^7 -128 ~ 127 首字母表示正负，以下同上</td>
</tr>
<tr>
<td>short</td>
<td>Short</td>
<td>2^15 -32786 ~ 32767</td>
</tr>
<tr>
<td>int</td>
<td>Integer</td>
<td>2^31 -2147483648~2147483647</td>
</tr>
<tr>
<td>long</td>
<td>Long</td>
<td>2^63 -9223372036854774808~9223372036854774807</td>
</tr>
<tr>
<td>boolean</td>
<td>Boolean</td>
<td>true、false</td>
</tr>
<tr>
<td>char</td>
<td>Character</td>
<td>\u0000~\uFFFF</td>
</tr>
<tr>
<td>float</td>
<td>Float</td>
<td>3.402823e+38 ~ 1.401298e-45</td>
</tr>
<tr>
<td>double</td>
<td>Double</td>
<td>1.797693e+308~ 4.9000000e-324</td>
</tr>
</tbody>
</table>
<h3 id="基本数据类型有什么好处">基本数据类型有什么好处</h3>
<p>Java是面向对象的编程语言，对象需要通过new创建，但是对于常用的类型，每次使用new一个对象，操作太麻烦。所以提供了基础类型，不用使用new创建，直接在栈内存中存储而不是引用堆内存，简洁高效。</p>
<h3 id="包装类有什么好处">包装类有什么好处</h3>
<p>Java是面向对象的编程语言，在常用操作中，比如容器Set、List等，只支持对对象进行操作，为了让基本类型也具有对象的特征，就出现了包装类型，它相当于将基本类型 “包装起来”，使得它具有了对象的性质，并且为其添加了属性和方法，丰富了基本类型的操作。</p>
<h3 id="自动拆箱与装箱">自动拆箱与装箱</h3>
<p>基本数据类型和包装类之间需要进行转换，把基本数据类型转换成包装类的过程就是打包（boxing），中文翻译为装箱。</p>
<p>反之，把包装类转换成基本数据类型的过程就是拆包（unboxing），中文翻译为拆箱。</p>
<p>在 Java SE5 之前，要进行装箱，可以通过以下代码：</p>
<pre><code class="language-java">// 装箱
Integer i = new Integer(1);
//拆箱
int j = i.intValue();
</code></pre>
<p>自动拆装箱就是把这个过程自动话了，java自动帮你实现这个过程，其他类型类似</p>
<pre><code class="language-java">Integer i=Integer.valueOf(1); // 装箱
int j=integer.intValue(); // 拆箱
</code></pre>
<h4 id="场景">场景</h4>
<pre><code class="language-java">// 赋值给包装器类型的变量
Integer i = 1; // autoboxing
int i_value = i; // unboxing

// 传递基本类型到集合类中
List&lt;Integer&gt; list = new ArrayList&lt;&gt;();
list.add(1); // list.add(Integer.valueOf(1)) autoboxing
int index_zero = list.get(0); // unboxing

// 比大小
Integer i = 1;
i == 1; // a.intValue() == 1; unboxing

// 运算
Integer i = 1;
Integer j = 2;
int k = i+j; // k = i.intValue() + j.intValue();我们发现，两个包装类型之间的运算，会被自动拆箱成基本类型进行。

// 函数
Integer get(Integer i){
	return i;
}
get(1);
Integer get(int i){
	return i;
}
Integer i = 1;
get(i);

// 相同类型的赋值
int i = 1;
Integer j = 2;
int r = true?i:j; // r = true?i:j.intValue();
</code></pre>
<h4 id="自动拆装箱与缓存">自动拆装箱与缓存</h4>
<pre><code class="language-java">public static void main(String... strings) {

    Integer integer1 = 3;
    Integer integer2 = 3;

    if (integer1 == integer2)
        System.out.println(&quot;integer1 == integer2&quot;);
    else
        System.out.println(&quot;integer1 != integer2&quot;);

    Integer integer3 = 300;
    Integer integer4 = 300;

    if (integer3 == integer4)
        System.out.println(&quot;integer3 == integer4&quot;);
    else
        System.out.println(&quot;integer3 != integer4&quot;);

}
</code></pre>
<p>在 Java 中，== 比较的是对象应用，而 equals 比较的是值。</p>
<p>所以，在这个例子中，不同的对象有不同的引用，所以在进行比较的时候都将返回 false。奇怪的是，这里两个类似的 if 条件判断返回不同的布尔值。</p>
<p>上面这段代码真正的输出结果：</p>
<pre><code class="language-java">integer1 == integer2
integer3 != integer4
</code></pre>
<p>**原因就和 Integer 中的缓存机制有关。**在 Java 5 中，在 Integer 的操作上引入了一个新功能来节省内存和提高性能。整型对象通过使用相同的对象引用实现了缓存和重用。</p>
<blockquote>
<p>适用于整数值区间 - 128 至 +127。</p>
<p>只适用于自动装箱。使用构造函数创建对象不适用。</p>
</blockquote>
<h4 id="integercache">IntegerCache</h4>
<pre><code class="language-java">// valueOf()
public static Integer valueOf(int i) {
    if (i &gt;= IntegerCache.low &amp;&amp; i &lt;= IntegerCache.high)    
        return IntegerCache.cache[i + (-IntegerCache.low)];
    return new Integer(i);
}

// IntegerCache
/**
     * Cache to support the object identity semantics of autoboxing for values between
     * -128 and 127 (inclusive) as required by JLS.
     *
     * The cache is initialized on first usage.  The size of the cache
     * may be controlled by the {@code -XX:AutoBoxCacheMax=&lt;size&gt;} option.
     * During VM initialization, java.lang.Integer.IntegerCache.high property
     * may be set and saved in the private system properties in the
     * sun.misc.VM class.
     */

    private static class IntegerCache {
        static final int low = -128;
        static final int high;
        static final Integer cache[];

        static {
            // high value may be configured by property
            int h = 127;
            String integerCacheHighPropValue =
                sun.misc.VM.getSavedProperty(&quot;java.lang.Integer.IntegerCache.high&quot;);
            if (integerCacheHighPropValue != null) {
                try {
                    int i = parseInt(integerCacheHighPropValue);
                    i = Math.max(i, 127);
                    // Maximum array size is Integer.MAX_VALUE
                    h = Math.min(i, Integer.MAX_VALUE - (-low) -1);
                } catch( NumberFormatException nfe) {
                    // If the property cannot be parsed into an int, ignore it.
                }
            }
            high = h;

            cache = new Integer[(high - low) + 1];
            int j = low;
            for(int k = 0; k &lt; cache.length; k++)
                cache[k] = new Integer(j++);

            // range [-128, 127] must be interned (JLS7 5.1.7)
            assert IntegerCache.high &gt;= 127;
        }

        private IntegerCache() {}
    }
</code></pre>
<p>IntegerCache是Integer内部静态类，JVM启动后自动加载static int low、high、cache[]，进行自动装箱时，如果数字在 - 128 至 127 之间时，会直接使用缓存中的对象，而不是重新创建一个对象。</p>
<p>其中的 javadoc 详细的说明了缓存支持 - 128 到 127 之间的自动装箱过程。最大值 127 可以通过<code>-XX:AutoBoxCacheMax=size</code>修改。</p>
<p>在 Boxing Conversion 部分的 Java 语言规范 (JLS) 规定如下：</p>
<p>如果一个变量 p 的值是：</p>
<pre><code class="language-shell">-128至127之间的整数(§3.10.1)
true 和 false的布尔值 (§3.10.3)
‘\u0000’至 ‘\u007f’之间的字符(§3.10.4)
</code></pre>
<p>范围内的时，将 p 包装成 a 和 b 两个对象时，可以直接使用 a==b 判断 a 和 b 的值是否相等。</p>
<h3 id="注意点">注意点</h3>
<h4 id="对象比较">对象比较</h4>
<p>包装对象的数值比较，不能简单的使用<code>==</code>，虽然 - 128 到 127 之间的数字可以，但是这个范围之外还是需要使用<code>equals</code>比较。</p>
<p>前面提到，有些场景会进行自动拆装箱，同时也说过，由于自动拆箱，如果包装类对象为 null，那么自动拆箱时就有可能抛出 NPE。</p>
<p>如果一个 for 循环中有大量拆装箱操作，会浪费很多资源。</p>
<h4 id="数据范围溢出">数据范围溢出</h4>
<pre><code class="language-java">int i = Integer.MAX_VALUE;
int j = Integer.MAX_VALUE;

int k = i + j;
System.out.println(k);
</code></pre>
<p>结果：-2</p>
<p>**这就是发生了溢出，溢出的时候并不会抛异常，也没有任何提示。**所以，在程序中，使用同类型的数据进行运算的时候，<strong>一定要注意数据溢出的问题。</strong></p>
<h4 id="gc压力">GC压力</h4>
<p>因为自动装箱会隐式地创建对象，像前面提到的那样，如果在一个循环体中，会创建无用的中间对象，这样会增加GC压力，拉低程序的性能。</p>
]]></content>
    </entry>
</feed>